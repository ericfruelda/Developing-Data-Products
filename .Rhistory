vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
varImp(vowel.rfmodel)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
set.seed(13234)
fit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(-imps)
order(imps)
rm(list=ls())
data<-read.csv("C:/Users/user/Documents/Documents/Coursera/Excel Analytics/data.csv",header=TRUE)
data<-data[,2:8]
train<-data[1:200,]
test<-data[201:400,]
library(caret)
model1<-train(Default_Outcomes~.,data=data,method="lm")
print(model1)
coef(model1[2])
coef(model1[2,])
coef(model1[,2])
summary.lm(model1)
coef <- summary(model1)$coefficients[2, 4]
coef
summary(model1)
head(summary(model1))
names<-data
rm(names)
names(data)
model2<-lm(Default_Outcomes~.,data)
print(model2)
coef <- summary(model2)$coefficients[2, 4]
coef
model2<-lm(Default_Outcomes~.,train)
coef <- summary(model2)$coefficients[2, 4]
coef
str(train)
data<-as.numeric(data)
data[,4:7]<-as.numeric(data[,4:7])
data[,4]<-as.numeric(data[,4])
data[,5]<-as.numeric(data[,5])
data[,6]<-as.numeric(data[,6])
str(data)
data<-read.csv("C:/Users/user/Documents/Documents/Coursera/Excel Analytics/data.csv",header=TRUE)
data<-data[,2:8]
as.numeric(as.character(sub("$","",data[,4:6], fixed=TRUE)))
str(data)
as.numeric(as.character(sub("$",data[,4:6], fixed=TRUE)))
data<-read.csv("C:/Users/user/Documents/Documents/Coursera/Excel Analytics/data.csv",header=TRUE)
data<-data[,2:8]
as.numeric(as.character(sub("$",data[,4],fixed=TRUE)))
?sub9
?sub()
as.numeric(as.character(sub("$","",data[,4],fixed=TRUE)))
str(data)
data<-read.csv("C:/Users/user/Documents/Documents/Coursera/Excel Analytics/data.csv",header=TRUE)
data<-data[,2:8]
data[,4] <- as.numeric(sub("\\$","", data[,4]))
data<-read.csv("C:/Users/user/Documents/Documents/Coursera/Excel Analytics/data.csv",header=TRUE)
data<-data[,2:8]
data[,4]<-as.numeric(gsub( "[\\$\,]", "",data[,4]))
data[,4]<-as.numeric(gsub( "[\$\,]", "",data[,4]))
data[,4]<-as.numeric(gsub( "\$\,", "",data[,4]))
data[,4]<-as.numeric(gsub( "\\$\,", "",data[,4]))
data[,4]<-as.numeric(gsub( "[$,]", "",data[,4]))
head(data[,4])
str(data)
data[,5]<-as.numeric(gsub( "[$,]", "",data[,5]))
data[,6]<-as.numeric(gsub( "[$,]", "",data[,6]))
str(data)
train<-data[1:200,]
test<-data[201:400,]
model1<-lm(Default_Outcomes~.,train)
print(model1)
prediction<-predict(model1,test)
prediction
confusionMatrix(test$Default_Outcomes,predict(model1,test))
confusionMatrix(test$Default_Outcomes,predict(model1,data))
confusionMatrix(train$Default_Outcomes,predict(model1,test))
confusionMatrix(test$Default_Outcomes,predict(model1,test))
confusionMatrix(test$Default_Outcomes,round(predict(model1,test))
)
?round()
confusionMatrix(train$Default_Outcomes,round(predict(model1,train))
)
confusionMatrix(test$Default_Outcomes,round(predict(model1,test))
)
confusionMatrix(test$Default_Outcomes,round(predict(model1,test),floor=0)
)
confusionMatrix(test$Default_Outcomes,abs(round(predict(model1,test),floor=0))
)
confusionMatrix(test$Default_Outcomes,abs(round(predict(model1,test))))
print(model1)
which[data[,7]==1]
data[which[data[,7]==1]]
data[,7]which(data[,7]==1)
ones<-data[,7]
which(ones[,1]==1)<-3.5
which(ones[1]==1)<-3.5
?for()
?for.do()
data[,7]<-7*data[,7]-3.5
head(data[,7])
model1<-lm(Default_Outcomes~.,train)
train<-data[1:200,]
test<-data[201:400,]
model1<-lm(Default_Outcomes~.,train)
confusionMatrix(test$Default_Outcomes,abs(round(predict(model1,test),digits=2)))
print(model1)
model2<-lm(Default_Outcomes~.,test)
print(model2)
model2$coef
coef1<-model2$coef
coef1
str(coef1)
dim(coef1)
coef1<-as.dataframe(coef1)
coef1<-dataframe(coef1)
?as.df
summary(coef1)
str(coef1)
coef1<-data.frame(coef1)
coef1
coef1<-data.frame(model1$coef)
coef2<-data.frame(model2$coef)
coef1
coef2
mean(coef1,coef2)
coefave<-(coef1+coef2)/2
coefave
(coef1[7,2]+coef2[7,2])/2
(coef1[7,1]+coef2[7,1])/2
plot(model1+model2)
plot(model1,model2)
print(model1,model2)
print(model1)
print(model2)
model1<-lm(Default_Outcomes~.,train)
model1<-lm(Default_Outcomes~.,test)
coef1<-data.frame(model1$coef)
model1<-lm(Default_Outcomes~.,train)
model2<-lm(Default_Outcomes~.,test)
coef1<-data.frame(model1$coef)
coef2<-data.frame(model2$coef)
par(mfrow=c(2,3))
termplot(model1)
layout(matrix(c(1,2,3,4),2,2))
plot(model1)
layout(matrix(c(1,2,3,4),2,2))
plot(model2)
layout(matrix(c(1,2,3,4),2,2))
plot(model1)
layout(matrix(c(1,2,3,4),2,2))
plot(model1+model2)
model3<-lm(coef1[,1],coef2[,1])
model3<-lm(coef1[,1]~coef2[,1])
plot(coef[,2],coef[,1])
plot(coef2[,1],coef1[,1])
abline(model3)
intersection(model1,model2)
coef1
coef2
head(test[,7])
model3<-lm(Default_Outcomes~income...1.000.+credit.card.debt+automobile.debt,test)
coef3<-data.frame(model3$coef)
coef3
str(test)
ftype(mean)
library(pryr)
install_packages("pryr")
install.packages("pryr")
ftype(mean)
library(pryr)
ftype(mean)
ftype(show)
ftype(dgamma)
ftype(colSums)
ftype(lm)
ftype(predict)
shiny::runApp('Documents/Coursera/Developing Data Products')
shiny::runApp('Documents/Coursera/Developing Data Products')
?createDataPartition
library(caret)
set.seed(1234)
data <- read.csv("data.csv", header = TRUE)
View(data)
setwd("~/Documents/Coursera/Developing Data Products/Course Project")
library(caret)
set.seed(1234)
data <- read.csv("data.csv", header = TRUE)
class(data)
summary(data)
dim(data)
arg(data)
str(data)
grep("[a-z]", letters)
grep("[a-z]", iloveyou)
grep("[a-z]", "iloveyou")
data2<-gsub("\\$(*,*)","-",data)
data2<-as.numeric(gsub("\\$(*,*)","-",data))
data2<-as.numeric(gsub("[$(,)]","-",data))
data2<-gsub("[$(,)]","-",data)
data2<-as.numeric(data2)
data2
data2<-gsub("[$(,)]","-",data[,c(4:7)])
data2
dim(data2)
dims(data2)
size(data2)
data2<-data
indx <- sapply(data2, is.factor)
data2[indx] <- lapply(data2[indx], function(x) as.numeric(gsub("[,$]", "", x)))
data2
?gsub
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
data2<-data
data2<-data
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) {
if (is.na(grep("\\$(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\$(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) {
if (is.na(grep("\\$+(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\$+(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) {
if (is.na(grep("\\$\(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\$\(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) {
if (is.na(grep("\\$\\(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\$\\(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) {
if (is.na(grep("\\(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
indx <- sapply(data, is.factor)
indx
summary(indx)
str(indx)
indx <- lapply(data, is.factor)
indx <- apply(data, is.factor)
indx <- is.factor(data)
indx <- is.factor(data[,:,])
data<- lapply(data, function(x) {
if (is.na(grep("\\(",x))==FALSE) {
gsub("[[:punct:]]","", x)
as.numeric(paste("-",x))
}
else if (is.na(grep("\\(",x))==TRUE) {
as.numeric(gsub("[[:punct:]]","", x))
}
})
data <- read.csv("data.csv", header = TRUE)
data2<-data
data<-data[,c(2:7)] #Selecting useful variables
data <- read.csv("data.csv", header = TRUE)
data<-data[,c(2:8)] #Selecting useful variables
splitdataset <- createDataPartition(y=data$Default_Outcomes, p=0.75, list=FALSE)
training <- data[splitdataset, ]
testing <- data[-splitdataset, ]
fitmodel <- lm(Default_Outcomes~.,data)
print(fitmodel)
str(data)
confusionMatrix(testing$Default_Outcomes,round(predict(fitmodelLM,testing))
)
confusionMatrix(testing$Default_Outcomes,round(predict(fitmodel,testing))
)
fitmodel <- lm(Default_Outcomes~.,data,method="rf)
fitmodel <- lm(Default_Outcomes~.,data,method="rf")
??lm
?lm
?model
?rf
confusionMatrix(testing$Default_Outcomes,roundup(predict(fitmodel,testing))
)
?round
library(randomForest)
str(data)
str(data2)
```{r loaddata, echo=TRUE, results='hide', warning=FALSE}
library(markdown)
ls()
rm(list=ls())
set.seed(1234)
data <- read.csv("data.csv", header = TRUE)
data<-data[,c(2:8)]
training <- data[c(1:300), ]
testing <- data[c(301:400), ]
fitmodel <- lm(Default_Outcomes~.,training)
print(fitmodel)
confusionMatrix(testing$Default_Outcomes,round(predict(fitmodel,testing)))
rm(list=ls())
data <- read.csv("data.csv", header = TRUE)
data<-data[,c(2:8)]
training <- data[c(1:300), ]
testing <- data[c(301:400), ]
fitmodel <- lm(Default_Outcomes~.,training)
confusionMatrix(testing$Default_Outcomes,round(predict(fitmodel,testing)))
y<-fitmodel[2,4]
fitmodel
coef$fitmodel
fitmodel$coef
class(fitmodel$coef)
?predict
x<-c(30,12,12,100000,-1000,-200000)
round(predict(fitmodel),x)
round(predict(fitmodel$coef),x)
decision<-round(predict(fitmodel,x)
)
fitmodel$coef
predict(fitmodel,x)
x<-c(0,x)
predict(fitmodel,x)
x
class(fitmodel)
?predict.lm
predict.lm(fitmodel,x)
x<dataframe(x)
x<as.dataframe(x)
x<as.data.frame(x)
x
summary(fitmodel)
as.numeric(cbind(1,x)%*%fitmodel$coef)
as.numeric(c(1,x)%*%fitmodel$coef)
as.numeric(x%*%fitmodel$coef)
round(x%*%fitmodel$coef)
round(as.numeric(x%*%fitmodel$coef))
decision <- round(as.numeric(x%*%fitmodel$coef))
if (decision >= 1)
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")
else
print("Congratulations! You have a very positive credit rating.")
})
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")
else
print("Congratulations! You have a very positive credit rating.")
}
if (decision >= 1)
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")
else
print("Congratulations! You have a very positive credit rating.")
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")}
else {
print("Congratulations! You have a very positive credit rating.")}
x<-c(1,30,12,12,0,-1000000,-1000000)
decision <- round(as.numeric(x%*%fitmodel$coef))
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")}
else {
print("Congratulations! You have a very positive credit rating.")}
decision<=0
decision<-0
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")}
else {
print("Congratulations! You have a very positive credit rating.")}
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")}
else {
print("Congratulations! You have a very positive credit rating.")}
if (decision >= 1) {
print("Sorry but we have predicted that you have a strong possibility of being a defaulter in the future")
} else {
print("Congratulations! You have a very positive credit rating.")}
hist9data
hist(data)
plot(data)
ggpplot(data)
ggplot(data)
g<-ggplot(data)
print(g)
plot(fitmodel)
plot(fitmodel,x)
plot(fitmodel,
main="Plot of Multivariate Regression Model")
?includeMarkdown
rm(list=ls())
data <- read.csv("data.csv", header = TRUE)
data<-data[,c(2:8)]
training <- data[c(1:300), ]
testing <- data[c(301:400), ]
fitmodel <- lm(Default_Outcomes~.,training)
print(fitmodel) # Displaying model
confusionMatrix(testing$Default_Outcomes,round(predict(fitmodel,testing)))
anova(testing$Default_Outcomes,round(predict(fitmodel,testing)))
/anova
?anova
anova(round(predict(fitmodel,testing)),testing$Default_Outcomes)
?verbatimTextOutput
?plotOutput
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
x<-as.matrix(c(1,30,10,10,1000000,0,0))
x
x<-as.matrix(cbind(1,30,10,10,1000000,0,0))
x
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
round(as.numeric(x%*%as.matrix(fitmodel$coef)))
shiny::runApp('~/Documents/Coursera/Developing Data Products')
?as.matrix
shiny::runApp('~/Documents/Coursera/Developing Data Products')
as.matrix(fitmodel$coef,nrow=7,ncol=1)
a<x %*% as.matrix(fitmodel$coef,nrow=7,ncol=1)
x<as.matrix(x)
class(x)
?as.matrix
as.matrix(fitmodel$coef,nrow=7,ncol=1,dimnames=c(1:7))
b<-as.matrix(fitmodel$coef,nrow=7,ncol=1,dimnames=NULL)
b
class(b)
str(b)
decision <- round(as.numeric(x() %*% as.matrix(fitmodel$coef,nrow=7,ncol=1)))
decision <- round(as.numeric(x() %*% as.matrix(fitmodel$coef,nrow=7,ncol=1)))
decision <- round(as.numeric(x %*% as.matrix(fitmodel$coef,nrow=7,ncol=1)))
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
shiny::runApp('~/Documents/Coursera/Developing Data Products')
includeMarkdown
?includeMarkdown
shiny::runApp('~/Documents/Coursera/Developing Data Products')
